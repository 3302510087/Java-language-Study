1.Java语言创始人    James-Gosling
2.Java语言的公司历史      SUN            Standford    University   Network----->SUN    Microsystems

java的特点
 1.跨平台                               （不同厂商的芯片）                    
 （不同版本操作系统）{jvm（Java  virtual  Machine）虚拟机}
 2.面向对象（OOP）
 3.简单性                               省去指针、        c++多继承性
 4.健壮性                               垃圾回收机制    异常处理
 5.多线程                               并行操作           提高执行性能       
 6.大数据开发相关


JVM     （Java  virtual  Machine）虚拟机}
       内存中开辟空间（执行）              源文件  编译  字节码
 高级计算机语言c++、java
 计算机主要计算硬件执行状态两种通电、断电对应0、1

 程序存储位置？--------程序就是有特定含义的单词和数字-----------》存储在计算机的一个地方
 完成的程序文件（计算机不能识别）---》---》编译   我们写好的文件经过该方式后计算机可以认识
 经上述过程之后就会有    源文件     字节码文件       在哪？硬盘

 计算机硬件

 硬盘上的文件靠后缀名区分文件种类     
 .java(Java源文件)    .class(字节码文件){JRE（Java runtime  environment）运行环境}

开发工具集{JDK(Java  Development Kit)}【Java开发所需】
 =====================================================================
 Javac(编译工具)           java.exe(执行工具)
 下载的时候注意与自己的电脑系统匹配                               {JDK包含JRE}
 bin文件夹                                         .exe工具
 include文件夹                                               
              包含其他语言写的程序             native修饰符
 jre文件夹                                                       运行环境
 lib文件夹                                                       预先定义好的类
 src.zip压缩文件                                             源代码
1.源代码（Java）
     源代码英文和数字---->按照相应规则来写
     后缀名  .java 
     1）class------>表示类
     2)后面写的是名字（按约定去写）
        命名规则：
            a.名字中可以有；
               字母（区分大小写）
               数字(0~9不能用作开头)
               符号{英文符号_、$（内部类）}
               中文（不推荐----开发不用）                             
             b.首字母大写   （两个以上单词组成时每个单词首字母大写）
             c.见名知意
2.盘符名：回车切换盘符
  cd ..          退出一层                         cd  文件夹名
3.配置环境变量(方便所有目录访问)
   用户变量：
      **path：%JAVA_HOME%\bin;%JAVA_HOME%jre\bin（固定路径，便于所有位置的相关目录访问）
      *class Path:(不管源文件在哪生成的.class文件方便管理{在同一文件夹下}).;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar
      *JAVA_HOME：（相对路径{为了让路径的写法变的简单}）E:\Program Files\Java\jdk1.8.0_144\
 public class Test{
           public static void main(String[ ] args){//主方法arguments(参数)
                   System.out.println("Hello java"); （ln表示换行） 
            }
 }
           注意后缀名隐藏情况
4.源文件的名字和字节码文件的名字要保持一致
 =====================================================================
 数据类型；
       基本数据类型    8个
              整型      byte   short   int   long
           浮点型      float   double 
           字符型      char    16bit  2字节   Unicode
           布尔型      boolean      1bit    true   false
 =====================================================================
 整型
       byte  字节型-------->8bit       敏感元单位
             1byte==8bit              0    0000000          256种组合
             第一个bit位记录正负     0+（正）                  1-（负）
             数值范围     负2的七次方到2的七次方
             以上其他整数类型依次乘2
        short  2字节==16bit
         int     4字节==32bit
         long  8字节==64bit
 浮点型
          float    4字节

常量：（存储在常量缓冲区（常量池）中，有且仅有一份{默认空间大小  32bit---int     64bit---double}）
        在程序运行过程中值不发生改变的量。
            1.固定的值便于程序运行
            2.代表特定含义
        特殊含义的常量
            1.“wangwu”-->String         String引用数据类型值比较特别          可以视为常量
       自己创建的空间 存储一个值  规定它不能改变      （final int abc=1;）
变量：   在程序运行过程中值可以【发生改变】的量
             变量是一小块可以使用的内存空间    默认是空的
             创建变量的时候需要指定该变量的数据类型和名字
             变量空间里面只能存在一个值
             空变量不能直接使用
命名规则
      字母（大小写敏感）数字0-9（数字不允许开头）  中文（不推荐LOW）  符号（英文符号$_）
      首字母小写（如果由两个以上单词组成之后单词的首字母大写）              见名知意
      int  number1;a=55;int number2=555;//   =（该符号为赋值符号表示将右面的量复制给左边的空间）
注释：计算机不用识别编译
        1//单行注释                   2.多行注释/**/                           {代码可读性}
        3.文档注释/**    */
Java对于小数的处理为保证其精度默认用64bit的内存空间即double型
 float numbers=3.4F（强制精度转换）；long d=2147483647L(编译程序认为数字过大编译不成功大写L容易区分)

内存结构和执行过程
              类定义      编译       加载（不同类加载器加载同一类【class】文件属于不同的类）     空间各个区      变量赋值

数据类型的转换    {基本数据类型不能直接转化为引用数据类型，但是可以间接转换（包装类）}
         自动类型转换        （由低精度向高精度转换、由所占比特位数少向多转换、由小存储空间向大存储空间转换）
         char（16）    可以转换为int（32）    Unicode码 
         强制类型转换         （类型名）（表达式）
         布尔类型的数据不能与其他基本型互相转换     
=====================================================================
       引用数据类型（可以直接转化   1. 自动类型转换   2. 强制类型转换）
           数组[]       类（抽象类abstract class）   interface(接口)     enum（枚举）
=====================================================================
Java运算符
   按对操作数的个数
          单目运算符    a++,++a,b--,--b
          双目运算符    +，-
          三目运算符     （a>b） ？x：y；
   按运算符功能
          算术运算符    +  -  *  /    %(取余  取模)   --（自减）{y=y-1；}   ++（自增）{x=x+1；}
                          int x=1;
                          int y=x++;//++在后   先赋值  后自增（计算机底层 先计算 后赋值）
                                           //x++等价于x=x+1,将变量空间的内容取出 进行计算（加1{从常量区取1}） 再次存回x空间
                                          //x在做值交换的时候    会产生一个临时空间（该空间起备份作用）
                                         //++在变量前面   先自增后备份         ++在变量后面   先备份后自增
                                         //最后将副本空间的量赋给别人
                               x=？
                               y=？
                            int m=1;
                            int  n=2;
                            int  sum= 
                           int a=1;{公司考试}
                                a=a++;
                                a=
          

           赋值运算符    
                              =        (变量空间名=值或者内容)
                             +=   -=    *=    /=       %=
                              x+=2;等价于x=x+2;
                              byte mm=1;
                              mm+=2;
                              mm=mm+2;//编译出错  类型从int转化到byte可能会有损失
                                                  x变量空间的值取出   从常量区取过来2   加法  结果重新存回x空间
           关系运算（比较）
                           >        >=       <     <=      ==       (对象instanceof类)
                           ==比较运算符
                           比较运算符的结果           boolean        true    false（满足为true 不满足为false）
           逻辑运算符
                         &逻辑与         |逻辑或           ^逻辑异或         !逻辑非         &&短路与    ||短路或 
                        ^逻辑异或---->前后两个表达式结果不一致  就可以（true）反之false
                         &&短路与    第一个表达式为假(false)不用判断第二个表达式
                         ||短路或        第一个表达式为真(true)不用判断第二个表达式
-------------------------------------------------------------------------------------------------------------- 
         位（bit）运算
                       &按位与                  |按位或               ^按位异或                     ~按位取反                       
                      <<按位左移                   >>按位右移（保留符号）              >>>按位右移（不保留符号）
                    
                     进位制转换（除该进制取余）然后自下往上排列（倒序）为有效位
                          10进制（0——>9）
                           2进制（0、1）
                            从右至左每一个元素乘以该进位制的位置次幂最后求和
                           8进制（每3个bit记录为一组以0开头计算成10进制表示）
                           16进制（每4个bit记录为一组以ox开头计算成10进制表示0-9使用即可，10->15——>>A->F）
                   3&5=?
                   1.转换为2进制
                   2.竖着按照 对应位置进行计算（1-->true   0---->false）
                   3.将计算后的结果转换位10进制
                   00000011
                   00000101       
                   00000110
                   ~6(单目运算符)                                                                             ~（-6）(单目运算符)
原码：00000000  00000000  00000000  00000110     1 0000000  00000000  00000000  00000110
反码：00000000  00000000  00000000  00000110     1 1111111  11111111  11111111  11111001   符号不动其余取反
补码：00000000  00000000  00000000  00000110     1 1111111  11111111  11111111  11111010   反码加1
计算机中不管是正数还是负数   存储形式都是以补码的形式来存储
反码是一种表示形式    取反是一种计算过程（每一个位置取反）
左移相当于乘以2的位移次幂
右移相当于除以2的位移次幂

&和&&的区别
快速计算   2*8（位移）
------------------------------------------------------------------------------------------------------------------- 
变量互换：(int a=1;int b=2;)
   1.第三方变量
   2.和差关系       int a=1; int b=2;a=a+b; b=a-b(b被赋入新值); a=a-b;(b没有变化){可能会产生和值的越界问题}
   3.a=a^b;//      1^2==>001
                                         010
                                         011==3^2==>
                                         010
                                         001        （1^2^2==1）             {一个数字^同一个数字两次值不发生改变}
                           a==异或中间值     b==2
      b=a^b;         a==异或中间值     b==1
      a=a^b;         a==2                    b==1
=====================================================================
Java语法结构
        顺序结构
        分支结构（选择结构）
               单分支if               
                   if(条件/boolean值){单行/多行语句}
                   if( ){语句}else{语句}
          import 导入包（import java.util.Scanner;）
          Scanner input=new Scanner(System.in);{引用数据类型}
          int a =input.nextInt();（读入int类型数据）   input.nextLine();（读入String类型数据）
程序设计注意点
   1.可读性 （注释、缩进）
   2.健壮性（严谨性）
   3.实现功能的基础上   优化（代码结构 逻辑结构 内存 扩展）
多分支switch
              switch(value{byte short int char  不能为长整型long}){//jdk1.5 enum    1.7String
                         case value1:     代码1       ;// 当value等于case 后面的value时为true则执行该case后面的语句
                         case value2:     代码2       ;break;//需要单分支
                         defult:   代码其他;
               }
                     if(复杂逻辑条件)                                    条件执行慢(一个一个判断)
                     switch()判断效率高                                只能做固定值的判断（穿透）

循环结构(重复做同一件事情)
              程序中想要执行一个循环需要满足三个条件
              初始值       终点判定条件  变化量
              for         while           do........while
              for(1初始值;2，5终点判定条件;4，7变化量){//循环执行步骤    ++后判断{允许将条件写在括号内、分号不能省略 }明确循环次数
                                    3，6代码段;
              }
              变量生命周期（栈内存空间  声明创建 用完后立即回收）
      如何拆解一个多位数字：
             int number=370;        153 370 371  407(水仙花数)
             int b=number/100;   int s=number/10%10//number%100/10
             int g=number%10; 
             Math.pow(double a,double b);//计算a的b次方
      public class DemoOne{
                 public static void main(String[] args){
                 Scanner in=new Scanner(System.in);
                 int n=9;
                 for(int count=1;count<=n;count++){
                 if(count>1){
                    for(int x=n-(count-1);x>=1;x--){System.out.print("*");}//画星星
                    for(int x=1;x<=(2*(count-2)+1);x++){System.out.print(" ");}//画空格
                    for(int x=n-(count-1);x>=1;x--){System.out.print("*");} 
                  }else{ for(int j=1;j<=(n*2-1);j++){
                           System.out.print("*");//第一行
                          }}
              System.out.println();//换行
            }}}

        import java.util.Scanner;
         public class DemoTow{
         public static void main(String[] args){
               int aa=4;
               int a=aa+1; 
               int d;
               for(int b=1;b<a;b++){
                                 for(int c=1;c<a-b;c++){System.out.print(" ");}//空格  
                                 for(d=1;d<=b;d++){System.out.print(d);}//右边数字
                                 for(int e=d-2;e>0;e--){System.out.print(e);}//左边数字
                System.out.println();
                      }}}
 
          System.out.println(""\(\为转义符转移身后的一个符号)\"");  
          转换特殊的字母{\n(换行) \r(回车 当前行结束)           \t(制表符)}
   关键字         
          break:     终止终断语句   （就近原则）中断当前循环（以后循环到该位置终止）
          循环标记（名字:for(;;){;}）[break 名字;]
          continue: {继续}（中断本（一）次循环  继续执行下次循环）     
   不明确循环次数
     初始值;(先判断后执行)
     while(终点判定条件){ 变化量; }
     初始值：(先执行后 判断)
     do{}while()
=====================================================
数组[]（容器）：（相同类型数据的集合、统一管理数据）{引用数据类型、}
   一维数组；
       声明数组：数据类型 数组名字[]/数据类型[] 数组名字   (int x[]/int[] x/ int []x都是数组)
       数组初始化（赋值）{对内存}：
           1.静态初始化:int[] array=new int[]{1,2,3,4,5,6,7,8,9,0}/ int array1={1,2,3,4,5,6,7,8,9,0};    【有长度 有元素】
           2.动态初始化:int[] array2=new int[5];  【有长度没有元素（元素是默认值）】 
                                      int默认值---->0
                                浮点型默认值------>0.0
                                布尔型默认值----->false
                                字符型默认值------>0对应的Unicode码
                            引用数据类型默认值-->null
          3.访问数组元素：（ 通过元素在数组位置（index  索引）来访问（下标）{从0开始}）{基本型元素和引用类型元素}
              数组轮询（遍历）:for( ; ; ){;} 具体到下标 存 取值方便  写法相对复杂        
              (增强for循环)forEach【for(自己定义的变量-->接受数组中每一个元素:遍历的数组名){ ; }】写法简单  只能取值
         4.基本数据类型和引用数据类型的区别（所有变量空间在栈内存中）
            int[] y={10,20,30,40,50};//int y=new int[]{10,20,30,40}【数组在堆内存的形态是一串连续的地址。】
            int[] x=y;//【new 相当于在堆内存开辟新空间】，【基本数据类型的变量空间存储的是值，传值（一个改变另一个不变）】
            y[0]=100;//【引用数据类型的变量空间存储的是内存地址（引用），传址（一个改变另一个改变）】
         5.数组元素交换对应位置(int[] a={1,2,3,4};int[] b={5,6,7,8};)
            方法一：中间变量法(受数组长度变化限制数组长度不一致无法使用)
                        for(int index=0;index<4;index++){//计数
                        int a=array[index];
                        array[index]=array1[index];
                        array1[index]=a;
                        }
            方法二：中间数组法（不受数组长度限制）
                        int[] temp=a;
                                      a=b;
                                b=temp;
main方法
         public 访问权限修饰符  公有的
         static  特征修饰符  静态的  只有一份
         void    没有返回值  关键字
         main   方法名字主要的
         args    可以传递参数 虚拟机调用主方法
           args  为String[] 类型的我们可以传递参数 给虚拟机由虚拟机调用
面向过程：按照过程去解决问题（步骤），以过程为本。不好复用。
面向对象：主要考虑有几个实体存在、分别负责哪一部分（该实体做了啥）（客观事物参与进来）
       按现实生活中的规律考虑问题（实体为动作的支配者）
    类和对象：
       类；用来描述具有相同特点的事物的集合。
    对象；具体到一个客观实体
    （现实生活中先有对象后有类）{计算机中先有类（定义）后有对象}               
      描述类的 步骤：   1.需要创建一个类       
                                 2.用属性和方法对该类进行描述 （属性；静态描述特点。 方法；）
    一、属性的必要组成部分：//权限修饰符   特征修饰符   {数据类型}   {属性名字[=值]}
                                3.创建当前类的对象  （类名  名字=new 类名（））
                                    i.创建对象之前要加载类模板
                                   ii.创建对象（堆内存中开辟空间，存放当前类的对象）       
    二、方法的组成部分：类的方法（做一件事情。行为）{参数：做事的条件 ，返回值：事情做完后的结果}
           //[权限修饰符]   特征修饰符   [返回值类型]   [方法名字][（参数列表）]抛出的异常{
              方法体；
              return  值（变量名）；}    返回值只有一个结果
        1.有参数无返回值    2.有参数有返回值
        3.无参数无返回值   4. 无参数有返回值        
        boolean f;if(f)相当于if(f==true){！f}
      每一个类不是要必须包含主方法。主方法只属于虚拟机，不属于任何一个类
   方法执行：1.方法存放在堆内存，在栈内存中执行（临时空间）
          2.形式参数与实际参数：{传值（形参改变实参不变）与传址（形参改变实参改变）}
             在方法执行过程（时）当中存在的参数叫做形参（临时变量空间）。
             方法调用时传递进去的参数叫做实参
       return x;   //返回一个方法执行完成后的结果   void类型的方法无返回值

排序：（比较-->元素位置互换）
   冒泡排序：
          int i;
		for(i=0;i<10;) {//读入数据
			Scanner reader=new Scanner(System.in); // 创建Scanner对象读入键盘输入的值
			array[i]=reader.nextInt();//
			i++;
			}
		for(int index=0;index<array.length;index++) /*比较轮次数控制*/ {//排序  冒泡排序
			for(int j=array.length-1;j>=index;j--) /*比较次数控制*/{ 
			if(array[j]>array[j-1])/*降序   < 升序*/{
			double temp=array[j];
			array[j]=array[j-1];
			array[j-1]=temp;
			}
		}
	}


   选择排序：1.在后面一堆元素找最小值【或者是最大值】
                     2.交换元素
          for（int index=0;index<array.length;index++）{   //控制位置的移动     
                   int minIndex=index;//
                   for（int i=index+1;i<array.length;i++）{//找属于数组对应位置的最小值 找到后放入对应位置
                                if(array[i]<array[minIndex]){
                                minIndex=i   //minIndex 重新赋值
                                }
                   }//对满足条件的元素互换位置
                   int temp=array[minIndex];
                   array[minIndex]=array[i];
                   array[i]=temp;
           }
   用户登录:
    import java.util.Scanner;
    public class JavaArrayLogin {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
			//数组充当数据库  先比账号 （唯一存在）  然后密码
				// TODO Auto-generated method stub
		//定义	
		String[] userbox=new String[]{"天天","3302510087","云","校花"};           //数组定义以及初始化 动态初始化
		int[] passwordbox=new int[]{5201314,10087,77586};
		//输入
		System.out.println("请输入用户名");
		Scanner reader=new Scanner(System.in);
		String user=reader.nextLine();
		//比较
		boolean b=false;                                                    //用布尔型数据标记
		for(int a=0;a<userbox.length;a++){
			if(userbox[a].equals(user))/* 找账号比较账号,比较引用类型  */  {        //账号存在
				System.out.println("请输入密码");                             //账号存在然后输入密码
				int password=reader.nextInt();
				if(passwordbox[a]==password)  /*比较密码,基本数据类型==比较*/  {
					System.out.println("恭喜您,登录成功，获得我的鸡蛋一个！");
					b=true;                   //说明两个数组验证通过改变b的值
				}
				break;}}
		if(b==false) {
			System.out.println("用户或密码错误");}}}
                              

                                public String Verification(int confim) {
		/*
		 * 实现随机验证码 4位验证码 数字加字母大小写组合 保证用户帐号安全 
		 * Unicode 码与字母（a-z,A-Z）转换 数字范围 0-9
		 * 字母（a-z,A-Z）65-90 97-122 Math.random(范围[0-1)) 
		 * 以下这个方法需要一个返回值(验证码)和参数 int
		 * numberValue = (int) (Math.random() * 10);
		 * 实现数字随机 int valueTwo = (int)
		 * (Math.random() * 26 + 65);// 实现大写字母随机 char charvalue = (char) valueTwo; int
		 * valueThree = (int) (Math.random() * 26 + 97);/
		 * 实现大写字母随机 char charValueTwo =(char) valueTwo;
		 */
		String verificate = " ";
		for (int count = 1; count <=confim; count++) {// 控制验证码位数
			int selectionNumber = (int) (Math.random() * 3);// 控制输出数字、 大写字母 、小写字母
			switch (selectionNumber) {
			case 0:
				int numberValue = (int) (Math.random() * 10);// 实现数字随机
				verificate += numberValue;
				break;
			case 1:
				int valueTwo = (int) (Math.random() * 26 + 65);// 实现大写字母随机
				char charvalue = (char) valueTwo;
				verificate += charvalue;
				break;
			case 2:
				int valueThree = (int) (Math.random() * 26 + 97);// 实现大写字母随机
				char charValueThree = (char) valueThree;
				verificate += charValueThree;
				break;
			}
		}
		return verificate;
	}
         Overload（方法重载）：
              一个类中的一组方法  相同的方法名字  不同的参数列表（参数个数、参数类型、参数顺序）
              便于使用者调用和记忆
              通过名字定位方法
              方法名字一致通过参数区别    （如果没有与参数类型一只的方法则进行参数转化【自动转化】）
         JDK1.5版本之后   （动态参数列表）
              int... x(类型)     （指的是参数的个数【0->n】{}而不是参数类型【参数类型是固定的】）
              动态参数列表中的参数为一个数组，有数组长度属性。
              不能和【相同意义】的数组类型的方法共存  本质上都为数组！！！{int...x     int[] x(只能存在一个)}
              数组类型的方法必须传递参数（不然会报错） 动态参数列表的方法参数个数可以为0（不报错）
              动态参数列表在方法中只能存在一份且必须放在末尾
      构造方法：构造（构建）当前类的对象{类【系统】会提供一个无参的构造方法}【它存在方法重载】
             写法；public 与类名相同的方法名()[异常]{方法体;}
             没有特征修饰符（无该结构）     没有返回值类型（无该结构）【但是有一个返回值，对象类型的（对象引用地址）】
             用new关键字调用
             类中如果有定义的构造方法则默认的构造方法会被新定义的构造方法覆盖
             需要构造方法的情况 {先赋值后创建对象}    构造方法先于一般方法执行
     this的使用（是一个关键字指代词）
         1.指代某一个对象（当前正在被处理的对象【当前调用属性或方法的那个对象】）
         2.属性与变量名字相同此时需要一个代替词代替对象
            this调用一般方法上下顺序随意【】
         3.一个构造方法内可以调用另一个构造方法通过this();  
            省略了构造方法的名字（名字与类名一致）{必须在程序第一行}
           public class Test{
           public Test(){
           System.out.println("无参数的构造方法")
            }
            public Test(int age,String name){
                  this();
                  System.out.println("有参数的构造方法")
            }
     }
     程序块（代码块）{一个特殊的方法【】}-->{}
         1.和普通方法一样  做事情
         2.无修饰符  无参数  无返回值  无名字的  特殊的方法
         3.块需要调用才能执行我们自己无法调用
               我们每一次调用构造方法之前系统帮助我们调用代码块  
         4.无重载概念      但是在一个类可以创建多个块（顺序执行）
xxxDao类操作数据库的类